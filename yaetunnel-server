#!/usr/bin/python3
import sqlite3
import argparse
from pathlib import Path
import json
import subprocess


class YAETunnelServer():

    db_location = "/var/lib/yaetunnel/yaetunnel.db"

    def __init__(self) -> None:
        
        # Create the database file, if necessary, and then connect
        self.create_yaetunnel_db(self.db_location)
        self.conn = sqlite3.connect(self.db_location)

    def run(self,args):
        args.func(args)
        
    def create_yaetunnel_db(self, fn='yaetunnel.db'):
        path = Path(fn)
        if not path.is_file():
            # print('Creating database and populating')
            self.conn = sqlite3.connect(fn)
            self.conn.execute('''CREATE TABLE DESTINATIONS
                (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                NAME           TEXT    NOT NULL,
                UUID           TEXT    NOT NULL,
                TUN_PORT       INT     NOT NULL,
                DEST_PORT      INT     NOT NULL,
                CONNECTED      INT     DEFAULT 0);''')
            self.conn.close()
        else:
            # print(f'Database {fn} already exists')
            pass

    def find_lowest_missing(self,lst):

        missing = [x for x in range(lst[0], lst[-1]+1) 
                                if x not in lst]
        return missing[0]

    def add_handler(self,args):        
        # First find the next available port larger than a specific number
        tun_port = 49151
        try:
            iterator = self.conn.cursor()
            iterator.execute("SELECT tun_port FROM DESTINATIONS")
            tun_ports = []    
            for row in iterator.fetchall():
                tun_ports.append(row[0])
            tun_ports.append(41951)
            tun_ports.append(max(tun_ports)+2)
            tun_ports = sorted(set(tun_ports))
            
            tun_port = self.find_lowest_missing(tun_ports)

            cmd = f"""INSERT INTO DESTINATIONS (NAME,UUID,TUN_PORT,DEST_PORT) VALUES ('{args.name}','{args.uuid}',{tun_port},{args.dest_port});"""
            #print (cmd)
            self.conn.execute (cmd)
            self.conn.commit()
        except:
            print('FAIL')
        
        print('SUCCESS')

    def delete_handler(self,args):
        # print('Removing a destination')
        try:
            cmd = ''
            if args.name is not None:
                cmd = f"""DELETE FROM DESTINATIONS WHERE name = '{args.name}';"""
            elif args.uuid is not None:
                cmd = f"""DELETE FROM DESTINATIONS WHERE uuid = '{args.uuid}';"""
            
            # print (cmd)
            self.conn.execute (cmd)
            self.conn.commit()
        except:
            print('FAIL')
        print('SUCCESS')

    def update_connection_status(self,tun_port, status):
        try:
            cursor = self.conn.cursor()
            sql_update_query = f"""UPDATE DESTINATIONS set CONNECTED = {status} where TUN_PORT = {tun_port}"""
            #print(sql_update_query)
            cursor.execute(sql_update_query)
            self.conn.commit()
            #print("Record Updated successfully ")
            cursor.close()
        except sqlite3.Error as error:
            print("Failed to update sqlite table", error)

    def reset_handler(self, args):
        
        # First, find the tunnel port
        name = args.name
        dest_port = args.dest_port
        cmd = f"""SELECT tun_port FROM DESTINATIONS WHERE name = '{args.name}' AND dest_port = {dest_port};"""
        
        iterator = self.conn.cursor()
        iterator.execute(cmd)
        row = iterator.fetchone()
        print(f'tun_port: {row[1]}')
   
        # Second, use lsof to find the PID of the port listener
        cmd = ['sudo', 'lsof' '-i:{tun_port}']
        py2output = subprocess.check_output(cmd, encoding='UTF-8')
        responses = py2output.split()
        pid = responses[1]

        print(f'Should kill pid {pid} to force autossh to re-creat the connection')



        # Third, kill this PID and force autossh on the DESTINATION to re-establish

    def query_handler(self,args):
        # print('Querying the list of destinations')
        try:
            # First, update the database with the connection status of all the entries    
            cmd = "SELECT * FROM DESTINATIONS"
            iterator = self.conn.cursor()
            iterator.execute(cmd)        
            for row in iterator.fetchall():
                name = row[1]
                tun_port = row[3]
                search_str = f'127.0.0.1:{tun_port}'
                py2output = subprocess.check_output(['netstat', '-tuln'], encoding='UTF-8')
                idx = py2output.find(search_str)
                if idx != -1:
                    #print(f'Port {tun_port} CONNECTED for device {name}')
                    self.update_connection_status(tun_port,1)
                else:
                    #print(f'Port {tun_port} DISCONNECTED for device {name}')
                    self.update_connection_status(tun_port,0)
        
            # Second, query the list and return than    
            cmd = "SELECT * FROM DESTINATIONS"
            if args.name is not None:
                cmd = f"""SELECT * FROM DESTINATIONS WHERE name = '{args.name}';"""
            elif args.uuid is not None:
                cmd = f"""SELECT FROM DESTINATIONS WHERE uuid = '{args.uuid}';"""

            iterator = self.conn.cursor()
            iterator.execute(cmd)
            dests = []    
            for row in iterator.fetchall():
                dest = {'name':row[1], 'uuid':row[2], 'tun_port':row[3], 'dest_port':row[4], 'connected':row[5]}        
                dests.append(dest)
            dests_json = json.dumps(dests, indent=2)
            print(dests_json)
        except:
            print('FAIL')


server = YAETunnelServer()

# Create the argument parser
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='Commands of yaetunnel')
#parser.add_argument("-v", ...)

add_parser = subparsers.add_parser("add")
remove_parser = subparsers.add_parser("delete")
reset_parser = subparsers.add_parser('reset')
query_parser = subparsers.add_parser("query")

add_parser.add_argument("--name", help="The name of the machine/port being registered")
add_parser.add_argument("--uuid", help="A unique identifier for the machine/port being registered")
add_parser.add_argument("--dest_port", help="The destination port of the machine being registered")
add_parser.set_defaults(func=server.add_handler)

remove_parser.add_argument("--name")
remove_parser.add_argument("--uuid")
remove_parser.set_defaults(func=server.delete_handler)

reset_parser.add_argument("--name", help="The name of the devide to reset the connection")
reset_parser.add_argument("--dest_port", help="The destination port for whic the connection should be reset")
reset_parser.set_defaults(func=server.reset_handler)

query_parser.add_argument("--name")
query_parser.add_argument("--uuid")
query_parser.set_defaults(func=server.query_handler)

args = parser.parse_args()
try:
    func = args.func
except AttributeError:
    parser.error('Too few arguments provided')

server.run(args)