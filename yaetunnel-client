#!/usr/bin/python3

import json
import hashlib
import uuid
import sys
import configparser
import paramiko
import socket
import subprocess
import os
import time
import argparse

class YAETunnelClient:

    def __init__(self, config_filename='/etc/yaetunnel/yaetunnel.ini') -> None:
        
        # First, we read from a config file to see the name and ports and find the uuid
        self.config = configparser.ConfigParser()
        self.config.read(config_filename)
        self.name = self.config['YAETUNNEL']['name']

        self.ports = [int(i) for i in self.config['YAETUNNEL']['ports'].split(',')]
        self.autossh = self.config['YAETUNNEL']['autossh'] 
        self.server = self.config['YAETUNNEL']['server']
        self.username = self.config['YAETUNNEL']['username']
        self.pem_file = self.config['YAETUNNEL']['pem']
        
        m = hashlib.md5()
        m.update(self.name.encode('utf-8'))
        self.new_uuid = uuid.UUID(m.hexdigest())


    def is_port_configured(self, port, dest_entries):
        for entry in dest_entries:
            if port == entry['dest_port']:
                return True
        return False

    def ssh_ctrl(self, ip, user, pemfile, cmd):
        key = paramiko.RSAKey.from_private_key_file(os.path.expanduser(pemfile))
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            ssh.connect(hostname=ip, username=user, pkey = key, compress = True,look_for_keys=False, allow_agent=False)
        except (socket.error,paramiko.AuthenticationException,paramiko.SSHException) as message:
            print(f"ERROR: SSH connection to {ip} failed: {str(message)}")
            sys.exit(1)

        stdin, stdout, ssh_stderr = ssh.exec_command(cmd)
        out = stdout.read()
        stdin.flush()
        ssh.close()
        return out

    def query_destination_ports(self):
        cmd = f'~/src/yaetunnel/yaetunnel-server query --name={self.name}'
        out = self.ssh_ctrl(self.server,self.username,self.pem_file,cmd)
        
        server_ports_query = []
        if len(out) > 0:
            server_ports_query = json.loads(out)

        return server_ports_query

    def add_missing_ports(self, ports, server_ports_query):
        for port in ports:
            if not self.is_port_configured(port,server_ports_query):
                print(f'Port {port} not configured. Adding to server')
                cmd = f'~/src/yaetunnel/yaetunnel-server add --name={self.name} --uuid={self.new_uuid} --dest_port={port}'
                out = self.ssh_ctrl(self.server,self.username,self.pem_file,cmd)
        
    def update_ports(self):

        # Query all the ports associates with this device name that are already on the server
        registered_ports = self.query_destination_ports()

        # If there are ports in the config file that aren't on the server, add them
        for port in self.ports:
            if not self.is_port_configured(port,registered_ports):
                print(f'Port {port} not configured. Adding to server')
                cmd = f'~/src/yaetunnel/yaetunnel-server add --name={self.name} --uuid={self.new_uuid} --dest_port={port}'
                out = self.ssh_ctrl(self.server,self.username,self.pem_file,cmd)

    def run(self):
        server_ports_query = self.query_destination_ports()
        for entry in server_ports_query:
            tunnel_port = entry['tun_port']
            destination_port = entry['dest_port']

            #cmd_Popen = [self.autossh,'-i',self.pem_file,'-M','0','-N',f'{self.username}@{self.server}','-R',f'{tunnel_port}:localhost:{destination_port}']
            
            # New command that sends the keep alive packets to keep the tunnel going even when no normal traffic is going.
            cmd_Popen = [self.autossh,'-i',self.pem_file,'-M','0','-o', 'ServerAliveInterval=15', '-o', 'ServerAliveCountMax=4', '-N',f'{self.username}@{self.server}','-R',f'{tunnel_port}:localhost:{destination_port}']
            
            print(f'AUTOSSH CMD: {cmd_Popen}')
            process = subprocess.Popen(cmd_Popen)            
            
        while True:
            time.sleep(1.0)


# Create the argument parser
parser = argparse.ArgumentParser()
parser.add_argument("--config", help="Speficy a config file that isn't in the normal location")
args = parser.parse_args()

config = '/etc/yaetunnel/yaetunnel.ini'
if args.config is not None:
    config = args.config

# Create the client object
client = YAETunnelClient(config_filename=config)

# Update the ports on the server
client.update_ports()

# Start autossh for each of the enabled ports
client.run()


