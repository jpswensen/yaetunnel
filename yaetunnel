#!/usr/bin/python3
import argparse
from pathlib import Path
import json
import configparser
import paramiko
from pathlib import Path
import json
import subprocess
import os
import texttable
import sys
import socket

class YAETunnel:

    def __init__(self,config_filename='~/.yaetunnel/yaetunnel_user.ini') -> None:
        pass
        
        
    def load_config(self, config_filename):
        self.config = configparser.ConfigParser()
        self.config.read(os.path.expanduser(config_filename))
        
        self.server = self.config['YAETUNNEL']['server']
        self.username = self.config['YAETUNNEL']['username']
        self.pem_file = self.config['YAETUNNEL']['pem']
        

    def run(self, args):
        args.func(args)

    def ssh_ctrl(self, ip, user, pemfile, cmd):
        key = paramiko.RSAKey.from_private_key_file(os.path.expanduser(pemfile))
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            ssh.connect(hostname=ip, username=user, pkey = key, compress = True,look_for_keys=False, allow_agent=False)
        except (socket.error,paramiko.AuthenticationException,paramiko.SSHException) as message:
            print(f"ERROR: SSH connection to {ip} failed: {str(message)}")
            sys.exit(1)

        stdin, stdout, ssh_stderr = ssh.exec_command(cmd)
        out = stdout.read()
        stdin.flush()
        ssh.close()
        return out

    def query_registered_ports(self):
        cmd = f'~/src/yaetunnel/yaetunnel-server query'
        out =self. ssh_ctrl(self.server,self.username,self.pem_file,cmd)
        
        server_ports_query = []
        if len(out) > 0:
            server_ports_query = json.loads(out)

        return server_ports_query

    def list_handler(self,args):        
        registered_ports = self.query_registered_ports()
        if args.raw != False:
            print(registered_ports)
        else:
            table = texttable.Texttable()
            table.header(["device","port","local port","connected"])
            for entry in registered_ports:
                #print(entry)
                table.add_row([entry["name"], entry["dest_port"], entry["tun_port"], entry["connected"]])
            table.set_cols_align(['l', 'r', 'r', 'r'])
            print(table.draw())

    def connect_handler(self,args):
        self.destination_username = args.username
        registered_ports = self.query_registered_ports()
        if args.name is None or args.port is None:
            print('ERROR: you must provide a device name and port')
        else:
            entry_found = None

            print(f'Searching for device {args.name} on port {args.port}')
            for entry in registered_ports:
                if entry["name"] == args.name and int(entry["dest_port"]) == int(args.port):
                    entry_found = entry
                    break
            
            if entry_found is None:
                print("The specified device and port could not be found")
            elif entry_found["connected"] == 0:
                print("The device with the specified name and port is not connected")
            else:
                print(f"Should create tunnel to {entry['name']} on port {entry['dest_port']} through tunnel port {entry['tun_port']}")

            if int(args.port) == 22: # special case for ssh
                cmd = f"ssh -i {self.pem_file} -A -t {self.username}@{self.server} ssh -A -p{entry['tun_port']} {self.destination_username}@localhost"                
                if args.newterm != False: 
                    if "darwin" in sys.platform:
                        os.system(f"""osascript -e 'tell app "Terminal" to do script "{cmd}"'""")
                    else:
                        print('Need to figure out how to launch a new terminal on other platforms')
                else:     
                    print('Creating direct connection')       
                    os.system(cmd)
            
            else:
                # Need to create a standard tunnel and then spin
                #cmd = f"ssh -i {pem_file} -A -t ec2-user@{server} ssh -A -p{entry['tun_port']} pi@localhost"                
                cmd_tun = f"ssh -o ServerAliveInterval=15 -o ServerAliveCountMax=4 -i {self.pem_file} -N -L {entry['tun_port']}:localhost:{entry['tun_port']} {self.username}@{self.server}"
                os.system(cmd_tun)

client = YAETunnel()

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='yaetunnel - Tunnel to a destination over and intermediate server')
#parser.add_argument("-v", ...)

parser.add_argument("--config", help="Speficy a config file that isn't in the normal location")

list_parser = subparsers.add_parser("list")
connect_parser = subparsers.add_parser("connect")

list_parser.add_argument("--name", help="A filter for the device names to list")
list_parser.add_argument("--uuid", help="A filter for the UUIDs to list")
list_parser.add_argument("--raw", action='store_true', help="Get the raw json connection data")
list_parser.set_defaults(func=client.list_handler)

connect_parser.add_argument("--name")
connect_parser.add_argument("--port")
connect_parser.add_argument("username", help="Specify the username on the destination device")
connect_parser.add_argument("--newterm",action='store_true')
connect_parser.set_defaults(func=client.connect_handler)



args = parser.parse_args()
try:
    func = args.func
except AttributeError:
    parser.error('Too few arguments provided')

# Need to reload the config after we have parsed arguments
config = '~/.yaetunnel/yaetunnel_user.ini'
if args.config is not None:
    print(f"Loaded new config: {args.config}")
    config = args.config
client.load_config(config)


client.run(args)

